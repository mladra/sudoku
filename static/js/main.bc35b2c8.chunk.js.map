{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","cols","useState","initialCells","cells","setCells","startTime","Date","now","hours","setHours","minutes","setMinutes","seconds","setSeconds","useEffect","interval","setInterval","delta","h","Math","floor","m","s","formatTime","clearInterval","t","slice","handleCellClick","row","col","newCells","selected","color","checkIfSolved","arr1","flatMap","map","r","value","arr2","solution","undefined","find","num","idx","className","key","type","id","style","backgroundColor","onClick","textAlign","numsRow","cellsRow","cell","solved","window","alert","cellRow","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bc35b2c8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport initialCells from \"./board.json\";\nimport solution from \"./solution.json\";\n\nfunction App() {\n  const rows = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n  const cols = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n  const nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n\n  const [cells, setCells] = useState(initialCells);\n  const startTime = Date.now();\n\n  const [hours, setHours] = useState(\"00\");\n  const [minutes, setMinutes] = useState(\"00\");\n  const [seconds, setSeconds] = useState(\"00\");\n\n  const selectedColor = \"#F0E68C\";\n  const white = \"#FFFFFF\";\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const delta = Date.now() - startTime;\n\n      const h = Math.floor(delta / 1000 / 60 / 60);\n      const m = Math.floor((delta / 1000 - h * 3600) / 60);\n      const s = Math.floor(delta / 1000 - m * 60 - h * 3600);\n      \n      setHours(formatTime(h));\n      setMinutes(formatTime(m));\n      setSeconds(formatTime(s));\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n\n  const formatTime = (t) => {\n    return (\"0\" + t).slice(-2);\n  };\n\n  const handleCellClick = (row, col) => () => {\n    const newCells = [...cells];\n    const selected = newCells[row][col].selected;\n    newCells[row][col].color = selected ? white : selectedColor;\n    newCells[row][col].selected = !selected;\n    setCells(newCells);\n  };\n\n  const handleButtonClick = (value) => () => {\n    const newCells = cells.map(cellsRow => cellsRow.map(cell => {\n      if (cell.selected) cell.value = value;\n      return cell;\n    }));\n\n    setCells(newCells);\n  };\n\n  const handleDeleteButtonClick = () => {\n    const newCells = cells.map(cellsRow => cellsRow.map(cell => {\n      if (cell.selected) cell.value = \"\";\n      return cell;\n    }));\n\n    setCells(newCells);\n  };\n\n  const handleCheckButtonClick = () => {\n    const solved = checkIfSolved();\n    window.alert(`Solved: ${solved}`);\n  };\n\n  const checkIfSolved = () => {\n    const arr1 = cells.flatMap(row => row.map(r => r.value));\n    const arr2 = solution.flatMap(row => row.map(r => r.value));\n    const missing = arr1.find((num, idx) => arr2[idx] !== num);\n    return missing === undefined;\n  };\n\n  const handleRestartButtonClick = () => {\n    setCells(initialCells); //FIXME: mladra: Not working :(\n  };\n\n  const handleClearSelectionClick = () => {\n    const newCells = cells.map(cellRow => cellRow.map(cell => {\n      cell.selected = false;\n      cell.color = white;\n      return cell;\n    }))\n    setCells(newCells);\n  };\n  \n  return (\n    <>\n    <div className=\"top-bar\">\n      {hours}:{minutes}:{seconds}\n    </div>\n    <div className=\"container\">\n      <div className=\"game\">\n        {rows.map(row =>\n          <div className=\"row\" key={`row-${row}`}>\n            {\n              cols.map(col => <div key={`${row}-${col}`} type=\"button\" id=\"id\" className=\"row-item\" style={{ backgroundColor: cells[row][col].color }} onClick={handleCellClick(row, col)}><h2>{cells[row][col].value}</h2></div>)\n            }\n          </div>\n        )}\n      </div>\n\n      <div className=\"controls\">\n        <div className=\"col\">\n          <h2 style={{ textAlign: \"center\" }}>Controls</h2>\n          {\n            nums.map(numsRow =>\n              <div className=\"row\" key={`nums-row-${numsRow}`}>\n                {\n                  numsRow.map(num =>\n                    <button key={`nums-row-${numsRow}-num-${num}`} type=\"button\" className=\"nums-button\" onClick={handleButtonClick(num)}>{num}</button>\n                  )\n                }\n              </div>\n            )\n          }\n          <div className=\"row\">\n            <button type=\"button\" className=\"nums-button\" onClick={handleDeleteButtonClick}>Delete</button>\n            <button type=\"button\" className=\"nums-button\" onClick={handleCheckButtonClick}>Check</button>\n            <button type=\"button\" className=\"nums-button\" onClick={handleRestartButtonClick}>Restart</button>\n          </div>\n          <div className=\"row\">\n            <button type=\"button\" className=\"nums-button\" onClick={handleClearSelectionClick}>Clear selection</button>\n          </div>\n        </div>\n      </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}