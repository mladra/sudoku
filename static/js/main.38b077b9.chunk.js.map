{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","variant","setVariant","selectedValue","setSelectedValue","initialCellValue","color","value","selected","corners","editable","Date","now","startTime","setStartTime","hours","setHours","minutes","setMinutes","seconds","setSeconds","isMouseDown","setMouseDown","isControlDown","setControlDown","gameDivRef","useRef","loadVariant","board","map","row","cell","easyBoard","cells","setCells","useEffect","interval","setInterval","delta","h","Math","floor","m","s","formatTime","clearInterval","t","slice","handleClickOutside","event","target","type","localName","current","contains","newCells","cellsRow","document","addEventListener","removeEventListener","listenForKeyPress","num","Number","key","isNaN","changeCellsNumber","eraseCellsValue","listenForKeyRelease","handleCellClick","rowIdx","colIdx","checkIfSolved","i","j","occurrencesRow","reduce","a","b","occurrencesCol","k","occurrencesSquare","rowMin","rowMax","colMin","colMax","l","handleCellMouseEnter","handleMouseDown","addColors","c1","c2","color1","Color","color2","mix","onMouseUp","className","name","id","style","marginBottom","onChange","newVariant","mediumBoard","hardBoard","ref","backgroundColor","onClick","onMouseDown","onMouseEnter","numsRow","solved","window","alert","href","title","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.38b077b9.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport easyBoard from \"./puzzles/easy.json\";\nimport mediumBoard from \"./puzzles/medium.json\";\nimport hardBoard from \"./puzzles/hard.json\";\nimport Color from 'color';\n\nfunction App() {\n  const nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n  const selectedColorSecondary = \"#F0E68C\";\n  const selectedColorPrimary = \"#E8D41C\";\n  const [variant, setVariant] = useState(\"1\");\n  const [selectedValue, setSelectedValue] = useState(null);\n\n  const initialCellValue = {\n    color: \"\",\n    value: \"\",\n    selected: false,\n    corners: [],\n    editable: true\n  };\n  const [startTime, setStartTime] = useState(Date.now());\n\n  const [hours, setHours] = useState(\"00\");\n  const [minutes, setMinutes] = useState(\"00\");\n  const [seconds, setSeconds] = useState(\"00\");\n\n  const [isMouseDown, setMouseDown] = useState(false);\n  const [isControlDown, setControlDown] = useState(false);\n\n  const gameDivRef = useRef(null);\n\n  const loadVariant = board => {\n    return board.map(row => row.map(cell => {\n      return {\n        color: initialCellValue.color,\n        value: cell.value,\n        selected: initialCellValue.selected,\n        corners: initialCellValue.corners,\n        editable: cell.value ? false : true\n      }\n    }));\n  };\n\n  const [cells, setCells] = useState(loadVariant(easyBoard));\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const delta = Date.now() - startTime;\n\n      const h = Math.floor(delta / 1000 / 60 / 60);\n      const m = Math.floor((delta / 1000 - h * 3600) / 60);\n      const s = Math.floor(delta / 1000 - m * 60 - h * 3600);\n\n      setHours(formatTime(h));\n      setMinutes(formatTime(m));\n      setSeconds(formatTime(s));\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [startTime]);\n\n  const formatTime = (t) => {\n    return (\"0\" + t).slice(-2);\n  };\n\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (event.target && (event.target.type === \"button\" || event.target.type === \"select-one\" || event.target.localName === \"option\")) return;\n\n      if (gameDivRef.current && !gameDivRef.current.contains(event.target)) {\n        const newCells = cells.map(cellsRow => cellsRow.map(cell => {\n          cell.selected = false;\n          return cell;\n        }));\n        \n        setSelectedValue(null);\n        setCells(newCells);\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [gameDivRef, cells]);\n\n  useEffect(() => {\n    const listenForKeyPress = event => {\n      const num = Number(event.key);\n      if (!Number.isNaN(num) && num >= 1 && num <= 9) {\n        changeCellsNumber(event.key);\n      } else if (event.key === \"Delete\") {\n        eraseCellsValue();\n      } else if (event.key === \"Control\") {\n        setControlDown(true);\n      }\n    };\n\n    const listenForKeyRelease = event => {\n      if (event.key === \"Control\") {\n        setControlDown(false);\n      }\n    };\n\n    document.addEventListener(\"keydown\", listenForKeyPress);\n    document.addEventListener(\"keyup\", listenForKeyRelease);\n    return () => {\n      document.removeEventListener(\"keydown\", listenForKeyPress);\n      document.removeEventListener(\"keyup\", listenForKeyRelease);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const handleCellClick = (rowIdx, colIdx) => () => {\n    setSelectedValue(null);\n    const newCells = isControlDown ? [...cells] : cells.map(row => row.map(cell => {\n      cell.selected = false;\n      return cell;\n    }));\n    newCells[rowIdx][colIdx].selected = true;\n    const value = newCells[rowIdx][colIdx].value;\n    setSelectedValue(value ? value : null);\n    setCells(newCells);\n  };\n\n  const handleButtonClick = (value) => () => {\n    changeCellsNumber(value);\n  };\n\n  const changeCellsNumber = value => {\n    const newCells = cells.map(cellsRow => cellsRow.map(cell => {\n      if (cell.selected && cell.editable) cell.value = value;\n      return cell;\n    }));\n\n    setCells(newCells);\n    setSelectedValue(value);\n  };\n\n  const handleDeleteButtonClick = () => {\n    eraseCellsValue();\n  };\n\n  const eraseCellsValue = () => {\n    const newCells = cells.map(cellsRow => cellsRow.map(cell => {\n      if (cell.selected && cell.editable) cell.value = \"\";\n      return cell;\n    }));\n\n    setCells(newCells);\n  };\n\n  const handleCheckButtonClick = () => {\n    const solved = checkIfSolved();\n    window.alert(`Solved: ${solved}`);\n  };\n\n  const checkIfSolved = () => {\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        const num = cells[i][j].value;\n        if (!num) return false;\n\n        const occurrencesRow = cells[i].reduce((a, b) => (b.value === num ? a + 1 : a), 0);\n\n        let occurrencesCol = 0;\n        for (let k = 0; k < 9; k++) {\n          if (cells[k][j].value === num) {\n            occurrencesCol++;\n          }\n        }\n\n        let occurrencesSquare = 0;\n        const [rowMin, rowMax] = i < 3 ? [0, 2] : i < 6 ? [3, 5] : [6, 8];\n        const [colMin, colMax] = j < 3 ? [0, 2] : j < 6 ? [3, 5] : [6, 8];\n        for (let k = rowMin; k <= rowMax; k++) {\n          for (let l = colMin; l <= colMax; l++) {\n            if (cells[k][l].value === num) {\n              occurrencesSquare++;\n            }\n          }\n        }\n\n        if (occurrencesRow !== 1 || occurrencesCol !== 1 || occurrencesSquare !== 1) return false;\n      }\n    }\n\n    return true;\n  };\n\n  const handleRestartButtonClick = () => {\n    const board = variant === \"1\" ? easyBoard : variant === \"2\" ? mediumBoard : hardBoard;\n    setCells(loadVariant(board));\n  };\n\n  const handleCellMouseEnter = (rowIdx, colIdx) => event => {\n    if (isMouseDown) {\n      const newCells = [...cells];\n      newCells[rowIdx][colIdx].selected = true;\n      setCells(newCells);\n    }\n  };\n\n  const handleMouseDown = (rowIdx, colIdx) => () => {\n    setMouseDown(true);\n    handleCellClick(rowIdx, colIdx)();\n  };\n\n  const handleMouseUp = () => {\n    setMouseDown(false);\n  };\n\n  const changeVariant = event => {\n    const newVariant = event.target.value;\n    setVariant(newVariant);\n    const board = newVariant === \"1\" ? easyBoard : newVariant === \"2\" ? mediumBoard : hardBoard;\n    setCells(loadVariant(board));\n    setHours(\"00\");\n    setMinutes(\"00\");\n    setSeconds(\"00\");\n    setStartTime(Date.now());\n  };\n\n  const addColors = (c1, c2) => {\n    const color1 = Color(c1);\n    const color2 = Color(c2);\n    return color1.mix(color2);\n  };\n\n  return (\n    <div onMouseUp={handleMouseUp}>\n      <div className=\"top-bar\">\n        <p>{hours}:{minutes}:{seconds}</p>\n        <div>\n          <select name=\"sudoku-select\" id=\"sudoku-select\" style={{ marginBottom: \"20px\" }} onChange={changeVariant} value={variant}>\n            <option value=\"1\">Easy</option>\n            <option value=\"2\">Medium</option>\n            <option value=\"3\">Hard</option>\n          </select>\n        </div>\n      </div>\n      <div className=\"container\">\n        <div ref={gameDivRef} className=\"game\">\n          {\n            cells.map((row, rowIdx) =>\n              <div className=\"row\" key={`row-${rowIdx}`}>\n                {\n                  row.map((cell, colIdx) =>\n                    <div\n                      key={`${rowIdx}-${colIdx}`}\n                      type=\"button\"\n                      id=\"id\"\n                      className={`\n                        row-item \n                        item-border \n                        ${rowIdx === 0 ? 'item-border-top' : ''} \n                        ${colIdx === 0 ? 'item-border-left' : ''}\n                        ${rowIdx === 2 || rowIdx === 5 || rowIdx === 8 ? 'item-border-bottom' : ''}\n                        ${colIdx === 2 || colIdx === 5 || colIdx === 8 ? 'item-border-right' : ''}\n                        `}\n                      style={{\n                        backgroundColor:\n                          cell.selected ?\n                            cell.color ? addColors(cell.color, selectedColorPrimary) : selectedColorPrimary\n                            : selectedValue !== null && selectedValue === cell.value ?\n                              selectedColorSecondary : cell.color,\n                        color: cell.editable ? \"#0080ff\" : \"black\"\n                      }}\n                      onClick={handleCellClick(rowIdx, colIdx)}\n                      onMouseDown={handleMouseDown(rowIdx, colIdx)}\n                      onMouseEnter={handleCellMouseEnter(rowIdx, colIdx)}>\n                      <h2>{cell.value}</h2>\n                    </div>)\n                }\n              </div>\n            )}\n        </div>\n\n        <div className=\"controls\">\n          <div className=\"col\">\n            {\n              nums.map(numsRow =>\n                <div className=\"row\" key={`nums-row-${numsRow}`}>\n                  {\n                    numsRow.map(num =>\n                      <button key={`nums-row-${numsRow}-num-${num}`} type=\"button\" className=\"nums-button\" onClick={handleButtonClick(num)}>{num}</button>\n                    )\n                  }\n                </div>\n              )\n            }\n            <div className=\"row\">\n              <button type=\"button\" className=\"nums-button\" onClick={handleDeleteButtonClick}>Delete</button>\n              <button type=\"button\" className=\"nums-button\" onClick={handleCheckButtonClick}>Check</button>\n              <button type=\"button\" className=\"nums-button\" onClick={handleRestartButtonClick}>Restart</button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"footer\">\n        <div>\n          Icons made by <a href=\"https://www.flaticon.com/authors/surang\" title=\"surang\">surang</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\"> www.flaticon.com</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}