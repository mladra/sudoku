{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","Array","fill","map","Object","assign","color","value","selected","cells","setCells","startTime","Date","now","hours","setHours","minutes","setMinutes","seconds","setSeconds","isMouseDown","setMouseDown","isControlDown","setControlDown","gameDivRef","useRef","useEffect","interval","setInterval","delta","h","Math","floor","m","s","formatTime","clearInterval","handleClickOutside","event","target","type","current","contains","newCells","cellsRow","cell","document","addEventListener","removeEventListener","listenForKeyPress","keyCode","listenForKeyRelease","t","slice","handleCellClick","rowIdx","colIdx","row","checkIfSolved","arr1","flatMap","r","arr2","solution","undefined","find","num","idx","handleCellMouseEnter","handleMouseDown","handleMouseUp","styling","backgroundColor","borderRight","borderBottom","borderTop","borderLeft","className","ref","key","id","style","onClick","onMouseDown","onMouseUp","onMouseEnter","textAlign","numsRow","solved","window","alert","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.34c13296.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport initialCells from \"./board.json\";\nimport solution from \"./solution.json\";\n\nfunction App() {\n  const rows = 9;\n  const cols = 9;\n  const nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n  const selectedColor = \"#F0E68C\";\n  const white = \"#FFFFFF\";\n\n  const [cells, setCells] = useState(new Array(rows).fill().map(() => new Array(cols).fill().map(() => Object.assign({}, { color: white, value: \"\", selected: false }))));\n  const startTime = Date.now();\n\n  const [hours, setHours] = useState(\"00\");\n  const [minutes, setMinutes] = useState(\"00\");\n  const [seconds, setSeconds] = useState(\"00\");\n\n  const [isMouseDown, setMouseDown] = useState(false);\n  const [isControlDown, setControlDown] = useState(false);\n\n  const gameDivRef = useRef(null);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const delta = Date.now() - startTime;\n\n      const h = Math.floor(delta / 1000 / 60 / 60);\n      const m = Math.floor((delta / 1000 - h * 3600) / 60);\n      const s = Math.floor(delta / 1000 - m * 60 - h * 3600);\n\n      setHours(formatTime(h));\n      setMinutes(formatTime(m));\n      setSeconds(formatTime(s));\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (event.target.type === \"button\") return;\n\n      if (gameDivRef.current && !gameDivRef.current.contains(event.target)) {\n        const newCells = cells.map(cellsRow => cellsRow.map(cell => {\n          cell.selected = false;\n          cell.color = white;\n          return cell;\n        }));\n\n        setCells(newCells);\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);;\n  }, [gameDivRef]);\n\n  useEffect(() => {\n    const listenForKeyPress = event => {\n      if (event.keyCode === 17) {\n        setControlDown(true);\n      }\n    };\n\n    document.addEventListener(\"keydown\", listenForKeyPress);\n    return () => document.removeEventListener(\"keydown\", listenForKeyPress);\n  }, []);\n\n  useEffect(() => {\n    const listenForKeyRelease = event => {\n      if (event.keyCode === 17) {\n        setControlDown(false);\n      }\n    };\n\n    document.addEventListener(\"keyup\", listenForKeyRelease);\n    return () => document.removeEventListener(\"keyup\", listenForKeyRelease);\n  }, []);\n\n  const formatTime = (t) => {\n    return (\"0\" + t).slice(-2);\n  };\n\n  const handleCellClick = (rowIdx, colIdx) => () => {\n    const newCells = isControlDown ? [...cells] : cells.map(row => row.map(cell => {\n      cell.selected = false;\n      cell.color = white;\n      return cell;\n    }));\n    newCells[rowIdx][colIdx].selected = true;\n    newCells[rowIdx][colIdx].color = selectedColor;\n    setCells(newCells);\n  };\n\n  const handleButtonClick = (value) => () => {\n    const newCells = cells.map(cellsRow => cellsRow.map(cell => {\n      if (cell.selected) cell.value = value;\n      return cell;\n    }));\n\n    setCells(newCells);\n  };\n\n  const handleDeleteButtonClick = () => {\n    const newCells = cells.map(cellsRow => cellsRow.map(cell => {\n      if (cell.selected) cell.value = \"\";\n      return cell;\n    }));\n\n    setCells(newCells);\n  };\n\n  const handleCheckButtonClick = () => {\n    const solved = checkIfSolved();\n    window.alert(`Solved: ${solved}`);\n  };\n\n  const checkIfSolved = () => {\n    const arr1 = cells.flatMap(row => row.map(r => r.value));\n    const arr2 = solution.flatMap(row => row.map(r => r.value));\n    const missing = arr1.find((num, idx) => arr2[idx] !== num);\n    return missing === undefined;\n  };\n\n  const handleRestartButtonClick = () => {\n    //TODO: mladra: To implement...\n  };\n\n  const handleCellMouseEnter = (rowIdx, colIdx) => event => {\n    if (isMouseDown) {\n      const newCells = [...cells];\n      newCells[rowIdx][colIdx].selected = true;\n      newCells[rowIdx][colIdx].color = selectedColor;\n      setCells(newCells);\n    }\n  };\n\n  const handleMouseDown = (rowIdx, colIdx) => () => {\n    setMouseDown(true);\n    handleCellClick(rowIdx, colIdx)();\n  };\n\n  const handleMouseUp = () => {\n    setMouseDown(false);\n  };\n\n  const styling = (rowIdx, colIdx, cell) => {\n    const styling = { \n      backgroundColor: cell.color,\n      borderRight: \"1px solid black\",\n      borderBottom: \"1px solid black\" \n    };\n\n    if (rowIdx === 0) {\n      styling.borderTop = \"3px solid black\";\n    }\n\n    if (colIdx === 0) {\n      styling.borderLeft = \"3px solid black\";\n    }\n\n    if (rowIdx === 8 || rowIdx === 2 || rowIdx === 5) {\n      styling.borderBottom = \"3px solid black\";\n    }\n\n    if (colIdx === 8 || colIdx === 2 || colIdx === 5) {\n      styling.borderRight = \"3px solid black\";\n    }\n\n    return styling;\n  };\n\n\n\n  return (\n    <>\n      <div className=\"top-bar\">\n        {hours}:{minutes}:{seconds}\n      </div>\n      <div className=\"container\">\n        <div ref={gameDivRef} className=\"game\">\n          {cells.map((row, rowIdx) =>\n            <div className=\"row\" key={`row-${rowIdx}`}>\n              {\n                row.map((cell, colIdx) =>\n                  <div\n                    key={`${rowIdx}-${colIdx}`}\n                    type=\"button\"\n                    id=\"id\"\n                    className=\"row-item\"\n                    style={styling(rowIdx, colIdx, cell)}\n                    onClick={handleCellClick(rowIdx, colIdx)}\n                    onMouseDown={handleMouseDown(rowIdx, colIdx)}\n                    onMouseUp={handleMouseUp}\n                    onMouseEnter={handleCellMouseEnter(rowIdx, colIdx)}>\n                    <h2>{cell.value}</h2>\n                  </div>)\n              }\n            </div>\n          )}\n        </div>\n\n        <div className=\"controls\">\n          <div className=\"col\">\n            <h2 style={{ textAlign: \"center\" }}>Controls</h2>\n            {\n              nums.map(numsRow =>\n                <div className=\"row\" key={`nums-row-${numsRow}`}>\n                  {\n                    numsRow.map(num =>\n                      <button key={`nums-row-${numsRow}-num-${num}`} type=\"button\" className=\"nums-button\" onClick={handleButtonClick(num)}>{num}</button>\n                    )\n                  }\n                </div>\n              )\n            }\n            <div className=\"row\">\n              <button type=\"button\" className=\"nums-button\" onClick={handleDeleteButtonClick}>Delete</button>\n              <button type=\"button\" className=\"nums-button\" onClick={handleCheckButtonClick}>Check</button>\n              <button type=\"button\" className=\"nums-button\" onClick={handleRestartButtonClick}>Restart</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}